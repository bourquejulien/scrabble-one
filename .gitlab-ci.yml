image: xwiillz/node-chromium-mongo:lts-bionic

cache:
    key: "${CI_COMMIT_REF_SLUG}-client"
    paths:
        - client/node_modules/
        - server/node_modules/
    policy: pull

.only-client: &only-client
    only:
        refs:
            - master
            - merge_requests
        changes:
            - client/**/*
    before_script:
        - if [ ! -d "client/node_modules" ]; then npm ci --prefix client .npm --prefer-offline; fi
    cache:
        key: "${CI_COMMIT_REF_SLUG}-client"
        paths:
            - client/node_modules/
            - client/.npm/
        policy: pull-push

.only-server: &only-server
    only:
        refs:
            - master
            - merge_requests
        changes:
            - server/**/*
    before_script:
        - if [ ! -d "server/node_modules" ]; then npm ci --prefix server .npm --prefer-offline; fi
    cache:
        key: "${CI_COMMIT_REF_SLUG}-server"
        paths:
            - server/node_modules/
            - server/.npm/
        policy: pull-push

stages:
    - install
    - build
    - lint
    - test
    - deploy

install:client:
    stage: install
    only:
        refs:
            - master
            - merge_requests
        changes:
            - client/package-lock.json
    script:
        - cd client
        - npm ci --cache .npm --prefer-offline
    cache:
        key: "${CI_COMMIT_REF_SLUG}-client"
        paths:
            - client/node_modules/
            - client/.npm/
        policy: pull-push

install:server:
    stage: install
    only:
        refs:
            - master
            - merge_requests
        changes:
            - server/package-lock.json
    script:
        - cd server
        - npm ci --cache .npm --prefer-offline
    cache:
        key: "${CI_COMMIT_REF_SLUG}-server"
        paths:
            - server/node_modules/
            - server/.npm/
        policy: pull-push

build:client:
    stage: build
    <<: *only-client
    script:
        - cd client
        - npm run build
    artifacts:
        paths:
            - client/dist/

build:server:
    stage: build
    <<: *only-server
    script:
        - cd server
        - npm run build
    artifacts:
        paths:
            - server/out/

lint:client:
    stage: lint
    needs: ["build:client"]
    allow_failure: true
    <<: *only-client
    script:
        - cd client
        - npm run lint

lint:server:
    stage: lint
    needs: ["build:server"]
    allow_failure: true
    <<: *only-server
    script:
        - cd server
        - npm run lint

test:client:
    stage: test
    needs: ["build:client"]
    <<: *only-client
    script:
        - Xvfb :99 -ac -screen 0 1920x1080x24 &
        - cd client
        - npm run coverage -- --browsers=ChromeHeadlessNoSandbox --watch=false
    artifacts:
        paths:
            - client/coverage/

test:server:
    stage: test
    needs: ["build:server"]
    <<: *only-server
    script:
        - cd server
        - npm run coverage
    artifacts:
        paths:
            - server/coverage/

pages:
    image: node:14.15.0
    stage: deploy
    environment:
        name: client
        url: https://scrabble.one
    rules:
        - if: "$CI_COMMIT_TAG =~ /deploy/"
          when: manual
    script:
        - cd client
        - npm ci --cache .npm --prefer-offline
        - npm run deploy -- --base-href /
        - mkdir ../public
        - mv dist/client/* ../public/
        - cd ../public/
        - cp index.html 404.html
        - cp index.html admin.html
    artifacts:
        paths:
            - public

deploy:server:
    image: docker:stable
    before_script:
        - docker info
    environment:
        name: server
        url: https://server.scrabble.one
    stage: deploy
    rules:
        - if: "$CI_COMMIT_TAG =~ /deploy/"
          when: manual
    services:
        - name: docker:dind
          alias: docker
          command: [ "--tls=false" ]
    variables:
        DOCKER_HOST: tcp://docker:2375
        DOCKER_DRIVER: overlay2
        DOCKER_TLS_CERTDIR: ""
        DOCKER_BUILDKIT: 1
        IMAGE_NAME: "$CI_REGISTRY_IMAGE/server:latest"
    script:
        - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
        - docker build --target final -f server/Dockerfile -t "$IMAGE_NAME" .
        - docker push "$IMAGE_NAME"
